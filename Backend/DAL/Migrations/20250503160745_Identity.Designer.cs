// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250503160745_Identity")]
    partial class Identity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("CarID ");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Brand ");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("LicensePlate ");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Model ");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("VIN ");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Year ");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Cars", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Master", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Specialization ");

                    b.HasKey("Id");

                    b.ToTable("Masters ", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("OrderID ");

                    b.Property<int>("CarId")
                        .HasColumnType("integer");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<int>("MasterId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date")
                        .HasColumnName("OrderDate ");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Status ");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric")
                        .HasColumnName("TotalCost ");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("ClientId");

                    b.HasIndex("MasterId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.OrderService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("OrderServiceID ");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("Quantity ");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer")
                        .HasColumnName("ServiceID ");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("TotalPrice ");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ServiceId");

                    b.ToTable("OrderServices", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("PaymentID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ReviewID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("ReviewDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ScheduleID")
                        .HasDefaultValueSql("nextval('weeklyschedule_scheduleid_seq'::regclass)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("MasterId")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("WeekDay")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasDefaultValueSql("'Monday'::character varying");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("Schedules", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ServiceID ");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("Description ");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Name ");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("Price ");

                    b.HasKey("Id");

                    b.ToTable("Services ", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Car", b =>
                {
                    b.HasOne("DAL.Entities.User", "Client")
                        .WithMany("Cars")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("ClientFk");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DAL.Entities.Master", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("Master")
                        .HasForeignKey("DAL.Entities.Master", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UserFK");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Order", b =>
                {
                    b.HasOne("DAL.Entities.Car", "Car")
                        .WithMany("Orders")
                        .HasForeignKey("CarId")
                        .IsRequired()
                        .HasConstraintName("CarFK");

                    b.HasOne("DAL.Entities.User", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("ClientFK");

                    b.HasOne("DAL.Entities.Master", "Master")
                        .WithMany("Orders")
                        .HasForeignKey("MasterId")
                        .IsRequired()
                        .HasConstraintName("MasterFK");

                    b.HasOne("DAL.Entities.Payment", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("PaymentFK");

                    b.Navigation("Car");

                    b.Navigation("Client");

                    b.Navigation("Master");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("DAL.Entities.OrderService", b =>
                {
                    b.HasOne("DAL.Entities.Order", "Order")
                        .WithMany("OrderServices")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("OrderFK");

                    b.HasOne("DAL.Entities.Service", "Service")
                        .WithMany("OrderServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ServiceFK");

                    b.Navigation("Order");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DAL.Entities.Review", b =>
                {
                    b.HasOne("DAL.Entities.User", "Client")
                        .WithMany("Reviews")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Client_FK");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DAL.Entities.Schedule", b =>
                {
                    b.HasOne("DAL.Entities.Master", "Master")
                        .WithMany("Schedules")
                        .HasForeignKey("MasterId")
                        .IsRequired()
                        .HasConstraintName("MasterFK");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("DAL.Entities.Car", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DAL.Entities.Master", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("DAL.Entities.Order", b =>
                {
                    b.Navigation("OrderServices");
                });

            modelBuilder.Entity("DAL.Entities.Payment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DAL.Entities.Service", b =>
                {
                    b.Navigation("OrderServices");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Master");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
